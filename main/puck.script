--[[

pucks just react to commands sent to them
	* they do not accept input
	* they only play a sound in response to collision messages
		* the collision itself is handled by the physics engine

pucks are dynamic collision objects but gravity is set to (0,0)
	* to make pucks settle down, we ramp up linear/angular damping

pucks check-in/-out with main.script
	* main.script handles user input

assume pucks will change color/style as game progresses

]]--

local global_counter = 0

go.property( 'imageNum', -1 )
go.property( 'isSelected', 0 )
go.property( 'idNum', -1 )

local imagelist = {
	'chipRedWhite_border',
	'chipBlueWhite_border',
	'chipGreenWhite_border',
	'chipWhiteBlue_border',
	'chipPurpleWhite_border',
	'chipBlackWhite_border',
}


function init(self)
	if( self.imageNum < 0 ) then
		self.imageNum = math.random( 1,#imagelist )
	end
	msg.post( '#sprite', 'play_animation', { id=hash(imagelist[self.imageNum]) } )

	self.idNum = global_counter
	global_counter = global_counter + 1

	local my_url = msg.url()
	print( 'new puck', my_url, self.idNum )
	msg.post( '/main#field_ctlr', 'check_in', { type='puck', id=go.get_id(),url=my_url,name=msg.url(my_url.socket,my_url.path,''),socket=my_url.socket,path=my_url.path } )

	-- start off with no puck movement
	go.set( '#collisionobject', 'linear_damping', 1.0 )
	go.set( '#collisionobject', 'angular_damping', 1.0 )

	self.anim_in_process = false
	self.xsound_in_process = false
	self.ysound_in_process = false
end

function final(self)
	local my_url = msg.url()
	msg.post( '/main#field_ctlr', 'check_out', { type='puck', id=go.get_id(),url=my_url,name=msg.url(my_url.socket,my_url.path,''),socket=my_url.socket,path=my_url.path } )
end

-- function update(self, dt)
-- end

function xsound_complete( self, message_id, message, sender )
	self.xsound_in_process = false
end
function ysound_complete( self, message_id, message, sender )
	self.ysound_in_process = false
end

function on_message(self, message_id, message, sender)
	if( message_id == hash('move_to') ) then
		print( 'got move_to message' )
		go.set_position( message.position )
	elseif( message_id == hash('halt_motion') ) then
		go.set( '#collisionobject', 'linear_damping', 1.0 )
		go.set( '#collisionobject', 'angular_damping', 1.0 )
		self.anim_in_process = false
	elseif( message_id == hash('resume_motion') ) then
		go.set( '#collisionobject', 'linear_damping', 0.01 )
		go.set( '#collisionobject', 'angular_damping', 0.01 )
		self.anim_in_process = false
	elseif( message_id == hash('push_puck') ) then
		go.set( '#collisionobject', 'linear_damping', 0.01 )
		go.set( '#collisionobject', 'angular_damping', 0.01 )
		go.animate( '#collisionobject', 'linear_damping', go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_OUTCIRC, 2.0, 2.0 )
		go.animate( '#collisionobject', 'angular_damping', go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_OUTCIRC, 2.0, 2.0 )
		msg.post( '.', 'apply_force', { force=message.force, position=go.get_position() } )
		self.anim_in_process = true

	elseif( message_id == hash('puck_crossing') ) then
		print( 'puck_crossing' )
		particlefx.play( '#pfx' )

	elseif( message_id == hash('collision_response' ) ) then
		-- start a ramp-up of the damping factors?
		if( self.anim_in_process == false ) then
			go.animate( '#collisionobject', 'linear_damping', go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_OUTCIRC, 2.0, 2.0 )
			go.animate( '#collisionobject', 'angular_damping', go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_OUTCIRC, 2.0, 2.0 )
			self.anim_in_process = true
		end

		-- play a sound
		-- pprint( message )
		local other_url = msg.url(message.other_id)
		other_url.fragment = 'script'
		local other_idnum
		local status = pcall( function() other_idnum = go.get( other_url, 'idNum' ) end )
		if( status == false ) then
			-- collision with sidelines
			if( self.ysound_in_process == false ) then
				sound.play( '#ysound', nil, ysound_complete )
				self.ysound_in_process = true
			end
		else
			-- collision with another puck .. only lower-idnum will play sound
			if( (other_idnum>self.idNum) and (self.xsound_in_process==false) ) then
				sound.play( '#xsound', nil, xsound_complete )
				self.xsound_in_process = true
			end
		end
	end
end

--function on_input(self, action_id, action)
--    msg.post(".", "acquire_input_focus")
--end

--function on_reload(self)
--end
