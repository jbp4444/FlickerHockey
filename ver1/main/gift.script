
--[[

gift-box controller script is mostly self-contained
	* gift creation starts a timer for the duration the gift will live
	* collision_response message triggers a spinning move and a hud message

the gift-factory is part of the main.collection and drops are initiated by main.script

]]--

go.property( 'duration', 5.0 )

function duration_expired( self, handle, time_elapsed )
	print( 'gift-duration expired' )
	go.delete(true)
end

function end_of_spin( self, url, property )
	print( 'gift-spinning is done' )
	go.delete(true)
end

function init(self)
	self.was_hit = false

	local my_url = msg.url()
	--msg.post( '/main', 'check_in', { type='gift', id=go.get_id(),url=my_url,name=msg.url(my_url.socket,my_url.path,''),socket=my_url.socket,path=my_url.path } )

	timer.delay( self.duration, false, duration_expired )
end

function final(self)
	local my_url = msg.url()
	--msg.post( '/main', 'check_out', { type='gift', id=go.get_id(),url=my_url,name=msg.url(my_url.socket,my_url.path,''),socket=my_url.socket,path=my_url.path } )
end

--function update( self, dt )
--end

function on_message( self, message_id, message, sender )
	if( message_id == hash('collision_response' ) ) then
		if( self.was_hit == false ) then
			-- this is the first contact
			print( 'gift: collision_response on', self, 'from', message.other_id )
			msg.post( '/hud', 'gift_score' )
			sound.play( '#sound' )
			self.was_hit = true
			go.animate( '.', 'euler.z', go.PLAYBACK_ONCE_FORWARD, 360, go.EASING_LINEAR, 1.0, 0, end_of_spin )
		end
	end
end

--function on_input(self, action_id, action)
--    msg.post(".", "acquire_input_focus")
--end

--function on_reload(self)
--end
